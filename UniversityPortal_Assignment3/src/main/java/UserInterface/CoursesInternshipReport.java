/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.StudentDirectory;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.University.University;
import info5100.university.reports.CourseVsInternshipReportDTO;
import info5100.university.reports.SubReportDTO;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author swaroopgupta
 */
public class CoursesInternshipReport extends javax.swing.JPanel {

    /**
     * Creates new form Courses_Internship_Report
     */
     JPanel workArea;
     University university;
     
    public CoursesInternshipReport(JPanel workArea,University university) {
        initComponents();
        
        this.workArea = workArea;
        this.university = university;

        refreshTable();
    }
    
    
     private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel)tblCourses_Internship_Report.getModel();
        model.setRowCount(0);
        List<CourseVsInternshipReportDTO> resultList = generateCourseVsInternshipReport(university);
        
        for(CourseVsInternshipReportDTO cir : resultList){
            Object row[] = new Object[2];
            row[0] = cir.getCourseName();
            row[1] = cir.getMetrics().getStudentsWithInternship();
             model.addRow(row);
            
        }   
    }
     
    private static List<CourseVsInternshipReportDTO> generateCourseVsInternshipReport( University university) {
        
        List<CourseVsInternshipReportDTO> resultList = new ArrayList<>();
        List<Course> courseList = new ArrayList<>();
        StudentDirectory studentdirectory;
        String courseName;
        CourseVsInternshipReportDTO courseVsInternshipReportDTO;
        SubReportDTO subReportDTO;
        
        for (Department dept : university.getAllDepartments()) {
            courseList = dept.getCourses();
            studentdirectory = dept.getStudentDirectory();
            
            if (courseList != null && courseList.size() > 0) {
                for (Course c : courseList) {
                    courseName = c.getName();
                    courseVsInternshipReportDTO = new CourseVsInternshipReportDTO();
                    subReportDTO = new SubReportDTO();
                    for (StudentProfile student : studentdirectory.getStudentlist()) {
                        if(student.getTranscript().getCoursesTaken().contains(c)){ // maybe check if courses were relevant for employment?
                            subReportDTO.setNoOfStudents(subReportDTO.getNoOfStudents() + 1);
                            if(student.hasValidInternship())
                                subReportDTO.setStudentsWithInternship(subReportDTO.getStudentsWithInternship() + 1);
                        }
                    }
                    subReportDTO.setSuccessRate(subReportDTO.calculateSuccessRate());
                    courseVsInternshipReportDTO.setCourseName(courseName);
                    courseVsInternshipReportDTO.setMetrics(subReportDTO);
                    resultList.add(courseVsInternshipReportDTO);
                }
            }
        }
        resultList.sort((CourseVsInternshipReportDTO c1, CourseVsInternshipReportDTO c2) 
                -> {
            return Double.valueOf(c2.getMetrics().getSuccessRate()).compareTo(Double.valueOf(c1.getMetrics().getSuccessRate()));
        });
        System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%"+resultList);
        return resultList;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses_Internship_Report = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        jScrollPane1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        tblCourses_Internship_Report.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        tblCourses_Internship_Report.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course Name", "No of Students who got Internship"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourses_Internship_Report);

        btnBack.setText("Back<<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("  Report of Courses vs Internships");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnBack)
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
        SummaryPanel sp = new SummaryPanel(workArea,university);
        workArea.add("SummaryPanel", sp);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.next(workArea); 
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourses_Internship_Report;
    // End of variables declaration//GEN-END:variables
}
