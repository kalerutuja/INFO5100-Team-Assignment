/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import info5100.university.example.University.University;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author swaroopgupta
 */
public class LoginPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginPanel
     */
    JPanel mainWorkArea;
    University university;
    public LoginPanel(JPanel mainWorkArea,University university) {
        initComponents();
        this.university = university;
        this.mainWorkArea = mainWorkArea;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogin = new javax.swing.JButton();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();

        btnLogin.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblUserName.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUserName.setText("Username:");

        lblPassword.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password:");

        lblTitle.setFont(new java.awt.Font("SansSerif", 2, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("University Portal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(269, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(374, 374, 374))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(btnLogin)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(lblTitle)
                .addGap(145, 145, 145)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(btnLogin)
                .addContainerGap(313, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        String errorMessage = fetchErrorMessageForCredentials();
        if (!errorMessage.isEmpty()){
            StringBuilder builder = new StringBuilder();
            builder.append("Please correct following "
                    + "details to continue -");
            builder.append("\n");
            builder.append(errorMessage);        
            JOptionPane.showMessageDialog(this, builder.toString(),"Error",JOptionPane.ERROR_MESSAGE);
            return;
        } 
        Map<String, String> usernamePasswordMap = new HashMap<>();
        usernamePasswordMap.put("surbhi", "surbhi123");
        usernamePasswordMap.put("r", "r");
        usernamePasswordMap.put("swaroop_123", "swaroop123");
        if(!validateCredentials(usernamePasswordMap)) {
            JOptionPane.showMessageDialog(this, "Invalid Username and Password"
                    ,"Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
      
        
        SummaryPanel sp = new SummaryPanel(mainWorkArea,university);
        mainWorkArea.add("SummaryPanel", sp);
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.next(mainWorkArea); 
    }//GEN-LAST:event_btnLoginActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private String fetchErrorMessageForCredentials() {
        StringBuilder builder = new StringBuilder();
        builder.append("");
        builder.append(fetchErrorMessageForUserName());
        builder.append(fetchErrorMessageForPassword());
        return builder.toString().trim();    
    }

    private String fetchErrorMessageForUserName() {
        String errorMessage = "";
        if(txtUserName.getText().isEmpty()) {
            errorMessage = "Please fill the username\n";
            return errorMessage;
        }
        if(!txtUserName.getText().matches("^[a-zA-Z,0-9,.,-,_]+$")){
            errorMessage = "Username is not valid\n ";
        }       
        return errorMessage;
    }

    private String fetchErrorMessageForPassword() {
        String errorMessage = "";
        if(txtPassword.getText().isEmpty()) {
            errorMessage = "Please fill the password\n";
        }
        return errorMessage;
    }

    private boolean validateCredentials(Map<String, String> usernamePasswordMap) {
        String usernameInput = txtUserName.getText();
        String passwordInput = txtPassword.getText(); 
       
      
        if(usernamePasswordMap.containsKey(usernameInput)) {
            String validPasswordForUsername = usernamePasswordMap.get(usernameInput);
            if(validPasswordForUsername.equals(passwordInput)) {
                return true;
            }
        }
        return false;   
    }
}
